{"ast":null,"code":"export const RegisterPharmacy = () => {\n  let map;\n  let service;\n  let infowindow;\n  function initMap() {\n    const sydney = new google.maps.LatLng(-33.867, 151.195);\n    infowindow = new google.maps.InfoWindow();\n    map = new google.maps.Map(document.getElementById(\"map\"), {\n      center: sydney,\n      zoom: 15\n    });\n    const request = {\n      query: \"Museum of Contemporary Art Australia\",\n      fields: [\"name\", \"geometry\"]\n    };\n    service = new google.maps.places.PlacesService(map);\n    service.findPlaceFromQuery(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n        for (let i = 0; i < results.length; i++) {\n          createMarker(results[i]);\n        }\n        map.setCenter(results[0].geometry.location);\n      }\n    });\n  }\n  function createMarker(place) {\n    if (!place.geometry || !place.geometry.location) return;\n    const marker = new google.maps.Marker({\n      map,\n      position: place.geometry.location\n    });\n    google.maps.event.addListener(marker, \"click\", () => {\n      infowindow.setContent(place.name || \"\");\n      infowindow.open(map);\n    });\n  }\n  window.initMap = initMap;\n};\n_c = RegisterPharmacy;\nvar _c;\n$RefreshReg$(_c, \"RegisterPharmacy\");","map":{"version":3,"names":["RegisterPharmacy","map","service","infowindow","initMap","sydney","google","maps","LatLng","InfoWindow","Map","document","getElementById","center","zoom","request","query","fields","places","PlacesService","findPlaceFromQuery","results","status","PlacesServiceStatus","OK","i","length","createMarker","setCenter","geometry","location","place","marker","Marker","position","event","addListener","setContent","name","open","window","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/GitHub/pillmate_/web_app/frontend/pillmate-app/src/layouts/RegisterPharmacy/RegisterPharmacy.tsx"],"sourcesContent":["\r\n\r\nexport const RegisterPharmacy = () => {\r\n\r\n    let map: google.maps.Map;\r\n    let service: google.maps.places.PlacesService;\r\nlet infowindow: google.maps.InfoWindow;\r\n\r\nfunction initMap(): void {\r\n  const sydney = new google.maps.LatLng(-33.867, 151.195);\r\n\r\n  infowindow = new google.maps.InfoWindow();\r\n\r\n  map = new google.maps.Map(document.getElementById(\"map\") as HTMLElement, {\r\n    center: sydney,\r\n    zoom: 15,\r\n  });\r\n\r\n  const request = {\r\n    query: \"Museum of Contemporary Art Australia\",\r\n    fields: [\"name\", \"geometry\"],\r\n  };\r\n\r\n  service = new google.maps.places.PlacesService(map);\r\n\r\n  service.findPlaceFromQuery(\r\n    request,\r\n    (\r\n      results: google.maps.places.PlaceResult[] | null,\r\n      status: google.maps.places.PlacesServiceStatus\r\n    ) => {\r\n      if (status === google.maps.places.PlacesServiceStatus.OK && results) {\r\n        for (let i = 0; i < results.length; i++) {\r\n          createMarker(results[i]);\r\n        }\r\n\r\n        map.setCenter(results[0].geometry!.location!);\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nfunction createMarker(place: google.maps.places.PlaceResult) {\r\n  if (!place.geometry || !place.geometry.location) return;\r\n\r\n  const marker = new google.maps.Marker({\r\n    map,\r\n    position: place.geometry.location,\r\n  });\r\n\r\n  google.maps.event.addListener(marker, \"click\", () => {\r\n    infowindow.setContent(place.name || \"\");\r\n    infowindow.open(map);\r\n  });\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    initMap: () => void;\r\n  }\r\n}\r\nwindow.initMap = initMap;\r\n}"],"mappings":"AAEA,OAAO,MAAMA,gBAAgB,GAAGA,CAAA,KAAM;EAElC,IAAIC,GAAoB;EACxB,IAAIC,OAAyC;EACjD,IAAIC,UAAkC;EAEtC,SAASC,OAAOA,CAAA,EAAS;IACvB,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,MAAM,EAAE,OAAO,CAAC;IAEvDL,UAAU,GAAG,IAAIG,MAAM,CAACC,IAAI,CAACE,UAAU,CAAC,CAAC;IAEzCR,GAAG,GAAG,IAAIK,MAAM,CAACC,IAAI,CAACG,GAAG,CAACC,QAAQ,CAACC,cAAc,CAAC,KAAK,CAAC,EAAiB;MACvEC,MAAM,EAAER,MAAM;MACdS,IAAI,EAAE;IACR,CAAC,CAAC;IAEF,MAAMC,OAAO,GAAG;MACdC,KAAK,EAAE,sCAAsC;MAC7CC,MAAM,EAAE,CAAC,MAAM,EAAE,UAAU;IAC7B,CAAC;IAEDf,OAAO,GAAG,IAAII,MAAM,CAACC,IAAI,CAACW,MAAM,CAACC,aAAa,CAAClB,GAAG,CAAC;IAEnDC,OAAO,CAACkB,kBAAkB,CACxBL,OAAO,EACP,CACEM,OAAgD,EAChDC,MAA8C,KAC3C;MACH,IAAIA,MAAM,KAAKhB,MAAM,CAACC,IAAI,CAACW,MAAM,CAACK,mBAAmB,CAACC,EAAE,IAAIH,OAAO,EAAE;QACnE,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,OAAO,CAACK,MAAM,EAAED,CAAC,EAAE,EAAE;UACvCE,YAAY,CAACN,OAAO,CAACI,CAAC,CAAC,CAAC;QAC1B;QAEAxB,GAAG,CAAC2B,SAAS,CAACP,OAAO,CAAC,CAAC,CAAC,CAACQ,QAAQ,CAAEC,QAAS,CAAC;MAC/C;IACF,CACF,CAAC;EACH;EAEA,SAASH,YAAYA,CAACI,KAAqC,EAAE;IAC3D,IAAI,CAACA,KAAK,CAACF,QAAQ,IAAI,CAACE,KAAK,CAACF,QAAQ,CAACC,QAAQ,EAAE;IAEjD,MAAME,MAAM,GAAG,IAAI1B,MAAM,CAACC,IAAI,CAAC0B,MAAM,CAAC;MACpChC,GAAG;MACHiC,QAAQ,EAAEH,KAAK,CAACF,QAAQ,CAACC;IAC3B,CAAC,CAAC;IAEFxB,MAAM,CAACC,IAAI,CAAC4B,KAAK,CAACC,WAAW,CAACJ,MAAM,EAAE,OAAO,EAAE,MAAM;MACnD7B,UAAU,CAACkC,UAAU,CAACN,KAAK,CAACO,IAAI,IAAI,EAAE,CAAC;MACvCnC,UAAU,CAACoC,IAAI,CAACtC,GAAG,CAAC;IACtB,CAAC,CAAC;EACJ;EAOAuC,MAAM,CAACpC,OAAO,GAAGA,OAAO;AACxB,CAAC;AAAAqC,EAAA,GA5DYzC,gBAAgB;AAAA,IAAAyC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}