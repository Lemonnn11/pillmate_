{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\pillmate_\\\\web_app\\\\frontend\\\\pillmate-app\\\\src\\\\layouts\\\\RegisterPharmacy\\\\RegisterPharmacy.tsx\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RegisterPharmacy = () => {\n  const apiKey = 'YOUR_API_KEY';\n  const geocodingApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\n  async function getLatLongFromAddress(address) {\n    try {\n      const response = await axios.get(geocodingApiUrl, {\n        params: {\n          address: address,\n          key: apiKey\n        }\n      });\n      const results = response.data.results;\n      if (results.length > 0) {\n        const location = results[0].geometry.location;\n        return {\n          lat: location.lat,\n          lng: location.lng\n        };\n      } else {\n        throw new Error('No results found for the provided address.');\n      }\n    } catch (error) {\n      console.error('Error fetching geocoding data:', error.message);\n      throw error;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_c = RegisterPharmacy;\nvar _c;\n$RefreshReg$(_c, \"RegisterPharmacy\");","map":{"version":3,"names":["axios","jsxDEV","_jsxDEV","RegisterPharmacy","apiKey","geocodingApiUrl","getLatLongFromAddress","address","response","get","params","key","results","data","length","location","geometry","lat","lng","Error","error","console","message","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/GitHub/pillmate_/web_app/frontend/pillmate-app/src/layouts/RegisterPharmacy/RegisterPharmacy.tsx"],"sourcesContent":["import axios from \"axios\";\r\n\r\n\r\nexport const RegisterPharmacy = () => {\r\n\r\n    const apiKey = 'YOUR_API_KEY';\r\n    const geocodingApiUrl = 'https://maps.googleapis.com/maps/api/geocode/json';\r\n    \r\n    async function getLatLongFromAddress(address: string): Promise<{ lat: number; lng: number }> {\r\n      try {\r\n        const response = await axios.get(geocodingApiUrl, {\r\n          params: {\r\n            address: address,\r\n            key: apiKey,\r\n          },\r\n        });\r\n    \r\n        const results = response.data.results;\r\n        if (results.length > 0) {\r\n          const location = results[0].geometry.location;\r\n          return { lat: location.lat, lng: location.lng };\r\n        } else {\r\n          throw new Error('No results found for the provided address.');\r\n        }\r\n      } catch (error) {\r\n            console.error('Error fetching geocoding data:', (error as Error).message);\r\n        throw error;\r\n      }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG1B,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EAElC,MAAMC,MAAM,GAAG,cAAc;EAC7B,MAAMC,eAAe,GAAG,mDAAmD;EAE3E,eAAeC,qBAAqBA,CAACC,OAAe,EAAyC;IAC3F,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAACJ,eAAe,EAAE;QAChDK,MAAM,EAAE;UACNH,OAAO,EAAEA,OAAO;UAChBI,GAAG,EAAEP;QACP;MACF,CAAC,CAAC;MAEF,MAAMQ,OAAO,GAAGJ,QAAQ,CAACK,IAAI,CAACD,OAAO;MACrC,IAAIA,OAAO,CAACE,MAAM,GAAG,CAAC,EAAE;QACtB,MAAMC,QAAQ,GAAGH,OAAO,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACD,QAAQ;QAC7C,OAAO;UAAEE,GAAG,EAAEF,QAAQ,CAACE,GAAG;UAAEC,GAAG,EAAEH,QAAQ,CAACG;QAAI,CAAC;MACjD,CAAC,MAAM;QACL,MAAM,IAAIC,KAAK,CAAC,4CAA4C,CAAC;MAC/D;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACVC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAGA,KAAK,CAAWE,OAAO,CAAC;MAC7E,MAAMF,KAAK;IACb;EACF;EAEA,oBACIlB,OAAA;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEd,CAAC;AAAAC,EAAA,GAhCYxB,gBAAgB;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}