{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\GitHub\\\\pillmate_\\\\web_app\\\\frontend\\\\pillmate-app\\\\src\\\\layouts\\\\RegisterPharmacy\\\\RegisterPharmacy.tsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const RegisterPharmacy = () => {\n  const getPlaceInfo = () => {\n    const map = new google.maps.Map();\n    const service = new google.maps.places.PlacesService(map);\n    const request = {\n      query: 'Your Place Name',\n      fields: ['name', 'geometry', 'formatted_address']\n    };\n    service.findPlaceFromQuery(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK && results) {\n        // Process the data for the specific place here\n        console.log(results[0]);\n      } else {\n        console.error('Place not found or an error occurred.');\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n_c = RegisterPharmacy;\nvar _c;\n$RefreshReg$(_c, \"RegisterPharmacy\");","map":{"version":3,"names":["RegisterPharmacy","getPlaceInfo","map","google","maps","Map","service","places","PlacesService","request","query","fields","findPlaceFromQuery","results","status","PlacesServiceStatus","OK","console","log","error","_jsxDEV","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/USER/Documents/GitHub/pillmate_/web_app/frontend/pillmate-app/src/layouts/RegisterPharmacy/RegisterPharmacy.tsx"],"sourcesContent":["\r\n\r\nexport const RegisterPharmacy = () => {\r\n\r\n    const getPlaceInfo = () => {\r\n\r\n        const map = new google.maps.Map();\r\n      \r\n          const service = new google.maps.places.PlacesService(map);\r\n      \r\n          const request = {\r\n            query: 'Your Place Name',\r\n            fields: ['name', 'geometry', 'formatted_address'],\r\n          };\r\n      \r\n          service.findPlaceFromQuery(request, (results, status) => {\r\n            if (status === google.maps.places.PlacesServiceStatus.OK && results) {\r\n              // Process the data for the specific place here\r\n              console.log(results[0]);\r\n            } else {\r\n              console.error('Place not found or an error occurred.');\r\n            }\r\n          });\r\n    }\r\n\r\n    return(\r\n        <div>\r\n\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAEA,OAAO,MAAMA,gBAAgB,GAAGA,CAAA,KAAM;EAElC,MAAMC,YAAY,GAAGA,CAAA,KAAM;IAEvB,MAAMC,GAAG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC,CAAC;IAE/B,MAAMC,OAAO,GAAG,IAAIH,MAAM,CAACC,IAAI,CAACG,MAAM,CAACC,aAAa,CAACN,GAAG,CAAC;IAEzD,MAAMO,OAAO,GAAG;MACdC,KAAK,EAAE,iBAAiB;MACxBC,MAAM,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,mBAAmB;IAClD,CAAC;IAEDL,OAAO,CAACM,kBAAkB,CAACH,OAAO,EAAE,CAACI,OAAO,EAAEC,MAAM,KAAK;MACvD,IAAIA,MAAM,KAAKX,MAAM,CAACC,IAAI,CAACG,MAAM,CAACQ,mBAAmB,CAACC,EAAE,IAAIH,OAAO,EAAE;QACnE;QACAI,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC,CAAC,CAAC,CAAC;MACzB,CAAC,MAAM;QACLI,OAAO,CAACE,KAAK,CAAC,uCAAuC,CAAC;MACxD;IACF,CAAC,CAAC;EACR,CAAC;EAED,oBACIC,OAAA;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEK,CAAC;AAEd,CAAC;AAAAC,EAAA,GA5BYzB,gBAAgB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}